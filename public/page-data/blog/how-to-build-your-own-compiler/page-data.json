{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/how-to-build-your-own-compiler","result":{"data":{"markdownRemark":{"html":"<p>Today we are going to write a compiler together this compiler is going to be the smallest compiler in the world. Since it's going to be a long article you can skip directly to the <a href=\"https://github.com/rolwin100/mini_compiler_demo\" target=\"_blank\" rel=\"nofollow\">code</a> if you can't wait 😅.</p>\n<p>Compilers are there everywhere, right from the point you switch ON your machine till you surf the web or open any application. So why do many developers tend to give less importance to it and don't have much knowledge on how it works 🤔. Probably they think compilers are too scary 👻 and only the nerdiest of the geeks 🤓 can work on it. But that not true. Compilers are quite simple. It's just that they involve a little understanding.</p>\n<p>Before jumping into what is a compiler and how compilers work. I'll explain what we are going to do in this article. We are going to write a code to compile a <a href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language)\" target=\"_blank\" rel=\"nofollow\"><code class=\"language-text\">LISP</code></a> like function calls into C-like function calls. For those of you who don't know what is LISP, it's just a very old programming language like Fortran.</p>\n<p>For example if we have two functions <code class=\"language-text\">add</code> and <code class=\"language-text\">subtract</code> they would be written like this in LISP and C.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>LISP</th>\n<th>C</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>2 + 2</strong></td>\n<td><code class=\"language-text\">(add 2 2)</code></td>\n<td><code class=\"language-text\">add(2, 2)</code></td>\n</tr>\n<tr>\n<td><strong>4 - 2</strong></td>\n<td><code class=\"language-text\">(subtract 4 2)</code></td>\n<td><code class=\"language-text\">subtract(4, 2)</code></td>\n</tr>\n<tr>\n<td><strong>2 + (4 - 2)</strong></td>\n<td><code class=\"language-text\">(add 2 (subtract 4 2))</code></td>\n<td><code class=\"language-text\">add(2, subtract(4, 2))</code></td>\n</tr>\n</tbody>\n</table>\n<h2></h2>\n<p>Easy-pezzy right? </p>\n<p>OK good!! we will be using the above example as the input for our compiler.</p>\n<h2>So what the hell is a compiler ? you may be asking ! 😂</h2>\n<p>So the compiler is a tool that just converts code from one programming language into another programming language without changing the actual meaning of the code. There is also something called a transpiler you may have come across while building JS application with typescript. A transpiler is also a compiler. So the difference between a compiler and a transpiler is that compiler converts code from a programming language to byte codes which humans can't understand. Whereas a transpiler is a source-to-source compiler i.e it converts code from one language to another and the compiled code is still human-readable.</p>\n<h2>stages in a compiler</h2>\n<p>Most of the compilers have three stages on a high level design i.e <code class=\"language-text\">Parsing</code>, <code class=\"language-text\">Transformation</code> and <code class=\"language-text\">Code Generation</code>.</p>\n<ol>\n<li><code class=\"language-text\">Parsing</code> is basically taking the code we are about to compile and turning it into an abstract representation.</li>\n<li><code class=\"language-text\">Transformation</code> is taking the output from the parsing stage and do whatever changes the compiler wants to do for the abstract representation.</li>\n<li><code class=\"language-text\">Code Generation</code> takes the output of transformation stage and converts it to the new Code.</li>\n</ol>\n<p>Thats it these are the three main stages of a compiler. 😃</p>\n<ol>\n<li>\n<h3>Parsing</h3>\n<p>Again parsing can be broken down into two phases <code class=\"language-text\">Lexical Analysis</code> and <code class=\"language-text\">Syntactic Analysis</code>.</p>\n<p><code class=\"language-text\">Lexical Analysis</code> takes the raw code and splits into token with the help of tokenizer also called as the lexer.</p>\n<p>For the following code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(add 2 (subtract 4 2))</code></pre></div>\n<p>The below token structure will be generated</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    { type: &#39;paren&#39;,  value: &#39;(&#39;        },\n    { type: &#39;name&#39;,   value: &#39;add&#39;      },\n    { type: &#39;number&#39;, value: &#39;2&#39;        },\n    { type: &#39;paren&#39;,  value: &#39;(&#39;        },\n    { type: &#39;name&#39;,   value: &#39;subtract&#39; },\n    { type: &#39;number&#39;, value: &#39;4&#39;        },\n    { type: &#39;number&#39;, value: &#39;2&#39;        },\n    { type: &#39;paren&#39;,  value: &#39;)&#39;        },\n    { type: &#39;paren&#39;,  value: &#39;)&#39;        },\n]</code></pre></div>\n<p>Below is the code of how a tokenizer generates the tokens.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * ============================================================================\n*                                   (/^▽^)/\n*                                THE TOKENIZER!\n* ============================================================================\n*/</span>\n\n<span class=\"token comment\">/**\n* the tokenizer is going to take the code and covert it to an array of tokens\n*\n* (add 2 (subtract 4 2))   =>   [{ type: 'paren', value: '(' }, { type: 'name', value: 'add'} ...]\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">tokenizer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// Let's keep a variable called current that will be used as a cursor.</span>\n<span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Token array for inserting the tokens.</span>\n<span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Take the current character</span>\n    <span class=\"token keyword\">let</span> char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The first thing we want to check for is an open parenthesis. This will </span>\n    <span class=\"token comment\">// later we will use this for `CallExpression`. As of now we will only take care</span>\n    <span class=\"token comment\">// of the character. if we come across one we push them in the token array with type</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'paren'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'('</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Then we increment `current` and continue to the next cycle of the loop</span>\n        current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Next we're going to check for a closing parenthesis. We do the same exact</span>\n    <span class=\"token comment\">// thing as before.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'paren'</span><span class=\"token punctuation\">,</span>value<span class=\"token operator\">:</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Let's check for whitespaces. We need them because whitespace exists to </span>\n    <span class=\"token comment\">// separate characters, but it isn't actually important for us to store as a token.</span>\n    <span class=\"token comment\">// We would only throw it out later.</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">WHITESPACE</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">WHITESPACE</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Next let us take care of number tokens. It's a bit different because a number can </span>\n    <span class=\"token comment\">// have a continuous sequence and we need to  capture the entire sequence of characters</span>\n    <span class=\"token comment\">// as one token.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   (add 123 456)</span>\n    <span class=\"token comment\">//        ^^^ ^^^</span>\n    <span class=\"token comment\">//        Only two separate tokens</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// So we start this off when we encounter the first number in a sequence.</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">NUMBERS</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/[0-9]/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NUMBERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// We're going to create a `value` string that we are going to push</span>\n        <span class=\"token comment\">// characters to.</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Loop through the characters in the sequence until we encounter a character that </span>\n        <span class=\"token comment\">// is not a number. Push each character that is a number to our `value` and </span>\n        <span class=\"token comment\">// incrementing `current` as we go.</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NUMBERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            value <span class=\"token operator\">+=</span> char<span class=\"token punctuation\">;</span>\n            char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// So what about strings then we need to parse the strings as well right. So how do we </span>\n    <span class=\"token comment\">// do it 🤷‍♀️. You guessed it right we need to look for the start and end of a double quote.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   (concat \"foo\" \"bar\")</span>\n    <span class=\"token comment\">//            ^^^   ^^^ string tokens</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The same logic can be applied which we used for numbers numberWe'll start by </span>\n    <span class=\"token comment\">// checking for the opening quote:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// value variable to insert the characters to form the string.</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">!==</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            value <span class=\"token operator\">+=</span> char<span class=\"token punctuation\">;</span>\n            char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Lastly let's take care of the `name token`. Names are sequence of letters,</span>\n    <span class=\"token comment\">// that are the names of functions in our lisp syntax.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   (add 2 4)</span>\n    <span class=\"token comment\">//    ^^^</span>\n    <span class=\"token comment\">//    Name token</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">LETTERS</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LETTERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Again we're just going to loop through all the letters pushing them to</span>\n        <span class=\"token comment\">// a value.</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LETTERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            value <span class=\"token operator\">+=</span> char<span class=\"token punctuation\">;</span>\n            char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Finally if we have not matched any characters then let's throw the below error</span>\n    <span class=\"token comment\">// and completely exit.</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I\\'m not really sure what this character is : '</span> <span class=\"token operator\">+</span> char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Then at the end of our `tokenizer` we simply return the tokens array.</span>\n<span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// export the tokenizer module final compiler...</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Syntactic Analysis</code> takes the token and reformats them into a tree-like structure called <code class=\"language-text\">Abstract Syntax Tree or AST</code> that describes the token's relationship with one another. This is also called as Intermediate representation or AST.</p>\n<p>Below is what an AST looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    type: &#39;Program&#39;,\n    body: [{\n        type: &#39;CallExpression&#39;,\n        name: &#39;add&#39;,\n        params: [{\n            type: &#39;NumberLiteral&#39;,\n            value: &#39;2&#39;,\n            }, {\n            type: &#39;CallExpression&#39;,\n            name: &#39;subtract&#39;,\n            params: [{\n                type: &#39;NumberLiteral&#39;,\n                value: &#39;4&#39;,\n            }, {\n                type: &#39;NumberLiteral&#39;,\n                value: &#39;2&#39;,\n            }]\n        }]\n    }]\n}</code></pre></div>\n<p>The code below is how the parser generates the <code class=\"language-text\">AST</code> by taking the output from the tokenizer as input.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * ============================================================================\n*                                 ヽ/❀o ل͜ o\\ﾉ\n*                                THE PARSER!!!\n* ============================================================================\n*/</span>\n\n<span class=\"token comment\">/**\n* For our parser take the token array from the output of tokenizer and tranform it to AST\n*\n*   [{ type: 'paren', value: '(' }, { type:'name', value: 'add'} ...]   =>   { type: 'Program', body: [...] }\n*/</span>\n\n<span class=\"token comment\">// Let's start by defining a function called parser that accepts an array of token</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Let's keep a variable called current that will be used as a cursor.</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// But this time we're going to use recursion instead of a `while` loop. So we</span>\n    <span class=\"token comment\">// define a `walk` function.</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Inside this function let's start by taking the value of the current token</span>\n        <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Let's spilt the each type of token into different nodes</span>\n        <span class=\"token comment\">// starting off with `number` tokens.</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">// We test to see if we have a `number` token.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If we have one, we'll increment `current`.</span>\n            current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Return a new AST node called `NumberLiteral` and set value to the </span>\n            <span class=\"token comment\">// value of our token.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'NumberLiteral'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Again let's do the same for a `StringLiteral` node.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'StringLiteral'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Next we're going to look for CallExpressions. We start this off when we</span>\n        <span class=\"token comment\">// encounter an open parenthesis.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'paren'</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'('</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">// We'll increment `current` to skip the parenthesis since we don't care</span>\n            <span class=\"token comment\">// about it in our AST.</span>\n            token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// we will create a node with the type `CallExpression`, and we're going</span>\n            <span class=\"token comment\">// to set the name as the current token's value since the next token after</span>\n            <span class=\"token comment\">// the open parenthesis is the name of the function.</span>\n            <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                type<span class=\"token operator\">:</span> <span class=\"token string\">'CallExpression'</span><span class=\"token punctuation\">,</span>\n                name<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// We increment `current` *again* to skip the name token.</span>\n            token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Next we would like to add each token as `params` for the `CallExpression` till we</span>\n            <span class=\"token comment\">// encounter a closing params.</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">// For this let's make use of Recursion instead of infinitely looping on each result.</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">// To explain this let's look at the LISP snippet below which includes multiple paranthesis.</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">//   (add 2 (subtract 4 2))</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">// The token array will have multiple nested paranthesis as well</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">//   [</span>\n            <span class=\"token comment\">//     { type: 'paren',  value: '('        },</span>\n            <span class=\"token comment\">//     { type: 'name',   value: 'add'      },</span>\n            <span class=\"token comment\">//     { type: 'number', value: '2'        },</span>\n            <span class=\"token comment\">//     { type: 'paren',  value: '('        },</span>\n            <span class=\"token comment\">//     { type: 'name',   value: 'subtract' },</span>\n            <span class=\"token comment\">//     { type: 'number', value: '4'        },</span>\n            <span class=\"token comment\">//     { type: 'number', value: '2'        },</span>\n            <span class=\"token comment\">//     { type: 'paren',  value: ')'        }, &lt;&lt;&lt; Closing parenthesis</span>\n            <span class=\"token comment\">//     { type: 'paren',  value: ')'        }, &lt;&lt;&lt; Closing parenthesis</span>\n            <span class=\"token comment\">//   ]</span>\n            <span class=\"token comment\">//</span>\n            <span class=\"token comment\">// We're going to rely on the nested `walk` function to increment our</span>\n            <span class=\"token comment\">// `current` variable past any nested `CallExpression`.</span>\n\n            <span class=\"token comment\">// So we create a `while` loop that will continue until it encounters a</span>\n            <span class=\"token comment\">// token with a `type` of `'paren'` and a `value` of a closing</span>\n            <span class=\"token comment\">// parenthesis.</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'paren'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'paren'</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// we'll call the `walk` function which will return a `node` and we'll</span>\n                <span class=\"token comment\">// push it into our `node.params`.</span>\n                node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Finally we will increment `current` one last time to skip the closing</span>\n            <span class=\"token comment\">// parenthesis.</span>\n            current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// And return the node.</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Again, if we haven't recognized the token type by now we're going to</span>\n        <span class=\"token comment\">// throw an error.</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Now, we're going to create our AST which will have a root which is a</span>\n    <span class=\"token comment\">// `Program` node.</span>\n    <span class=\"token keyword\">let</span> ast <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'Program'</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// And we're going to kickstart our `walk` function, pushing nodes to our</span>\n    <span class=\"token comment\">// `ast.body` array.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The reason we are doing this inside a loop is because our program can have</span>\n    <span class=\"token comment\">// `CallExpression` after one another instead of being nested.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//   (add 2 2)</span>\n    <span class=\"token comment\">//   (subtract 4 2)</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">&lt;</span> tokens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// At the end of our parser we'll return the AST.</span>\n    <span class=\"token keyword\">return</span> ast<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Just exporting our parser to be used in the final compiler...</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<h3>Transformation</h3>\n<p>The next stage of the compiler is the transforamtion stage. In this stage we take the <code class=\"language-text\">AST</code> from the previous step and do manipulation over it or create a new <code class=\"language-text\">AST</code> from the existing <code class=\"language-text\">AST</code>. It can manipulate the <code class=\"language-text\">AST</code> in the same language or it can translate it to an entirelly different language.</p>\n<p>Now let's start transforming our <code class=\"language-text\">AST</code>.</p>\n<p>If we look at the <code class=\"language-text\">AST</code> closely we have node with a certain property each of these nodes are know as AST node. These nodes define an isolated part of the tree.</p>\n<p>For instance for \"NumberLiteral\" we have a node.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    type: &#39;NumberLiteral&#39;,\n    value: &#39;2&#39;,\n}</code></pre></div>\n<p>and if we conider a \"CallExpression\" then we have the node as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    type: &#39;CallExpression&#39;,\n    name: &#39;subtract&#39;,\n    params: [\n        // nested nodes \n    ],\n}</code></pre></div>\n<p>When we are taversing the <code class=\"language-text\">AST</code> we either add, remove or manipulate the nodes or we can create a new AST from the existing AST.</p>\n<p>Since we are targetting a new language let's create a new AST while keeping the old one as reference.</p>\n<ul>\n<li><code class=\"language-text\">Traversal</code>: This process involves visiting all the nodes in the AST with depth-first approach. Comsider the <code class=\"language-text\">AST</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    type: &#39;Program&#39;,\n    body: [{\n        type: &#39;CallExpression&#39;,\n        name: &#39;add&#39;,\n        params: [{\n        type: &#39;NumberLiteral&#39;,\n        value: &#39;2&#39;\n        }, {\n        type: &#39;CallExpression&#39;,\n        name: &#39;subtract&#39;,\n        params: [{\n            type: &#39;NumberLiteral&#39;,\n            value: &#39;4&#39;\n        }, {\n            type: &#39;NumberLiteral&#39;,\n            value: &#39;2&#39;\n        }]\n        }]\n    }]\n}</code></pre></div>\n<p>So for the <code class=\"language-text\">AST</code> above we would go like:</p>\n<ol>\n<li>Program - starting at the top level of the AST</li>\n<li>CallExpression (add) - Next let us move to the first node of the program body</li>\n<li>NumberLiteral (2) - Going to to the first element of CallExpression's params</li>\n<li>CallExpression (subtract) - Going to the second element of CallExpression's params</li>\n<li>NumberLiteral (4) - Going to the first element of CallExpression's params</li>\n<li>NumberLiteral (2) - Going to the second element of CallExpression's params</li>\n</ol>\n<p>If we are going to manipulate the nodes directly we would likely to introduce lot of scenarios, so we better we visit each nodes.</p>\n<ul>\n<li><code class=\"language-text\">Vistors</code>: So visitor is going to be an object that will have methods to handle different node types.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NumberLiteral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Whenever we find a match with AST node and visitor object type we will call the methods in the visitor object.</p>\n<p>Inorder to make things simple and to keep track of the modified node let's pass the node and reference to the parent node.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">NumberLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okk so there is a teeny weeny problem with that structure 😑. Imagine we go down the tree of a node as soon as we finish up at the bottom of that node we may endup calling an exit function which may lead to ignoring of other nodes.</p>\n<p>In order to support this the final form of our visitor should look like.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    NumberLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>Looks good now. Now lets write the snippet for our traverser.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * ============================================================================\n*                                 ⌒(❀>◞౪◟&lt;❀)⌒\n*                               THE TRAVERSER!!!\n* ============================================================================\n*/</span>\n\n<span class=\"token comment\">/**\n* So our traverser function will accept an AST and also a visior node this visitor\n* node method will be used for performing a mapping with the AST nodes.\n*\n*   traverse(ast, {\n*     Program: (node, parent) => {\n*       //do something here\n*     },\n*\n*     CallExpression: (node, parent) => {\n*       //do something here\n*     },\n*\n*     NumberLiteral: (node, parent) => {\n*      //do something here\n*     },\n*   });\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast<span class=\"token punctuation\">,</span> visitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Iterates over the array and call the next function traverseNode with reference </span>\n    <span class=\"token comment\">// to the parent.</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// accepts a node and parent so that it can pass both to our visitor methods</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// We start by testing for the existence of a method on the visitor with a</span>\n        <span class=\"token comment\">// matching `type`.</span>\n        <span class=\"token keyword\">let</span> methods <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If there is an `enter` method for this node type we'll call it with the</span>\n        <span class=\"token comment\">// `node` and its `parent`.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            methods<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Next we are going to split things up by the current node type.</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">// Let's start with the 'Program' array and then call the traverseArray </span>\n            <span class=\"token comment\">// method for the body node</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'Program'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Next we take care of 'CallExpression' since 'CallExpressions' have params</span>\n            <span class=\"token comment\">// we will pass that as the array params.</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'CallExpression'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// `NumberLiteral` and `StringLiteral` We don't have anything to do so we just break</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'NumberLiteral'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'StringLiteral'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// If node type is not recognized we simply throw an error</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// if `exit` method is encountered for this node type we'll call it with the</span>\n        <span class=\"token comment\">// `node` and its `parent`.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            methods<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Let's call the traverserNode function with the parent parameter as null </span>\n    <span class=\"token comment\">// because the top level does not have a parent</span>\n    <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// exporting the traverser method</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> traverser<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next up let's write the transformer function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> traverser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./traverser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n    * ============================================================================\n    *                                   ⁽(◍˃̵͈̑ᴗ˂̵͈̑)⁽\n    *                              THE TRANSFORMER!!!\n    * ============================================================================\n    */</span>\n\n    <span class=\"token comment\">/**\n    * Our transformer is going to take the ast and pass it to the traverser and for\n    * the new AST.\n    *\n    * ----------------------------------------------------------------------------\n    *   Original AST                     |   Transformed AST\n    * ----------------------------------------------------------------------------\n    *   {                                |   {\n    *     type: 'Program',               |     type: 'Program',\n    *     body: [{                       |     body: [{\n    *       type: 'CallExpression',      |       type: 'ExpressionStatement',\n    *       name: 'add',                 |       expression: {\n    *       params: [{                   |         type: 'CallExpression',\n    *         type: 'NumberLiteral',     |         callee: {\n    *         value: '2'                 |           type: 'Identifier',\n    *       }, {                         |           name: 'add'\n    *         type: 'CallExpression',    |         },\n    *         name: 'subtract',          |         arguments: [{\n    *         params: [{                 |           type: 'NumberLiteral',\n    *           type: 'NumberLiteral',   |           value: '2'\n    *           value: '4'               |         }, {\n    *         }, {                       |           type: 'CallExpression',\n    *           type: 'NumberLiteral',   |           callee: {\n    *           value: '2'               |             type: 'Identifier',\n    *         }]                         |             name: 'subtract'\n    *       }]                           |           },\n    *     }]                             |           arguments: [{\n    *   }                                |             type: 'NumberLiteral',\n    *                                    |             value: '4'\n    * ---------------------------------- |           }, {\n    *                                    |             type: 'NumberLiteral',\n    *                                    |             value: '2'\n    *                                    |           }]\n    * (sorry the other one is longer 😜) |         }\n    *                                    |       }\n    *                                    |     }]\n    *                                    |   }\n    * ----------------------------------------------------------------------------\n    */</span>\n\n    <span class=\"token comment\">// Transformer function with the ast as params</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// A new AST with initalization</span>\n        <span class=\"token keyword\">let</span> newAst <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'Program'</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// We are going to pass a property called context to the node which keeps the reference</span>\n        <span class=\"token comment\">// to the parent</span>\n        ast<span class=\"token punctuation\">.</span>_context <span class=\"token operator\">=</span> newAst<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Let's call the traverser function with ast and our visitor</span>\n        <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Take care of NumberLiteral</span>\n            NumberLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// We'll visit them on enter.</span>\n                <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// create a node call 'NumberLiteral' that will push the parent context.</span>\n                        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                            type<span class=\"token operator\">:</span> <span class=\"token string\">'NumberLiteral'</span><span class=\"token punctuation\">,</span>\n                            value<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\">// Let's do the same for `StringLiteral`</span>\n            StringLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                        type<span class=\"token operator\">:</span> <span class=\"token string\">'StringLiteral'</span><span class=\"token punctuation\">,</span>\n                        value<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\">// So `CallExpression` should be taken care like this.</span>\n            CallExpression<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token comment\">//  create a `CallExpression` node with a nested `Identifier`.</span>\n                    <span class=\"token keyword\">let</span> expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                        type<span class=\"token operator\">:</span> <span class=\"token string\">'CallExpression'</span><span class=\"token punctuation\">,</span>\n                        callee<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                            type<span class=\"token operator\">:</span> <span class=\"token string\">'Identifier'</span><span class=\"token punctuation\">,</span>\n                            name<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Let's create a new context for the original 'CallExpression' so that we can push</span>\n                    <span class=\"token comment\">// arguments </span>\n                    node<span class=\"token punctuation\">.</span>_context <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Ceck the parent node is a `CallExpression` if it is not then</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'CallExpression'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                        <span class=\"token comment\">// wrap our `CallExpression` node with an `ExpressionStatement`. </span>\n                        <span class=\"token comment\">// This is done because the top level `CallExpression` in JavaScript are actually </span>\n                        <span class=\"token comment\">// statements.</span>\n                        expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                            type<span class=\"token operator\">:</span> <span class=\"token string\">'ExpressionStatement'</span><span class=\"token punctuation\">,</span>\n                            expression<span class=\"token operator\">:</span> expression<span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\">// Lat but not the least wrap the expression with the parent context</span>\n                    parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// return the new AST</span>\n        <span class=\"token keyword\">return</span> newAst<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// export transformer </span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> transformer<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<h3>Code Generation</h3>\n<p>This is the final step in our compiler design this phase is going to generate the code for the new program by taking the AST. At times compilers do things that will overlap with the transformation.</p>\n<p>Code generators work in different ways, some will reuse the tokens from the earlier and others will generate the code in a linear fashion by generating a new AST.</p>\n<p>In our code generator we are going to use the same AST and generate our code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">/**\n    * ============================================================================\n    *                               ヾ（〃＾∇＾）ﾉ♪\n    *                            THE CODE GENERATOR!!!!\n    * ============================================================================\n    */</span>\n\n    <span class=\"token comment\">/**\n    * Our CodeGenerator is going to call itself recursively to to print a string \n    * The code generator is quite straight forward to understand\n    */</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// We'll break things down by the `type` of the `node`.</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'Program'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// For `ExpressionStatement` call the codegenerator function and add a semicolon</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'ExpressionStatement'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">';'</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// For `CallExpression` we will print the `callee`, and call the codeGenerator</span>\n            <span class=\"token comment\">// recursively so that the end result of recursion is going to be a string </span>\n            <span class=\"token comment\">// the arguments are concatenated as shown below</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'CallExpression'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">'('</span> <span class=\"token operator\">+</span>\n                    node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">')'</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// For identifier we will return the name</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'Identifier'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// For `NumberLiteral` let's return the value</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'NumberLiteral'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// For `StringLiteral` we just add quotes arround the value</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'StringLiteral'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'\"'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// And if we haven't recognized the node, we'll throw an error.</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// export code generator</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> codeGenerator<span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it we are done with our compiler 👏👏👏.</p>\n<p>For the last part let us call the compiler program in a file.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> tokenizer     <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./tokenizer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> parser        <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> transformer   <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./transformer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> codeGenerator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./code-generator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n* ============================================================================\n*                                  (۶* ‘ヮ’)۶”\n*                         !!!!!!!!THE COMPILER!!!!!!!!\n* ============================================================================\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenizer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ast    <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newAst <span class=\"token operator\">=</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>newAst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// and simply return the output!</span>\n    <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>","timeToRead":14,"frontmatter":{"title":"How to build your own compiler ? ( The Worlds smallest compiler )","date":"01 Apr 2020","tags":["javascript"],"path":"blog/how-to-build-your-own-compiler","excerpt":"Compilers are there everywhere in our day to day use. Most developers tend to ignore it because they feel only the nerdiest of the geeks can code it. Let's build the worlds smallest compiler to understand how compilers work.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='258'%20viewBox='0%200%20400%20258'%20preserveAspectRatio='none'%3e%3cpath%20d='M290%2012l-10%2012H51v199h34l34%201-11%2013-14%2017-3%204h309v-52h-6l-7-1%207-1h6V0H300l-10%2012M181%2069c-10%202-18%206-26%2012l-6%204%2015%2015%2015%2015%204-2c2-2%206-3%208-3l3-1V67h-3l-10%202m18%2019l1%2021%203%201%207%203%204%202%2015-15%2015-14-3-3c-9-8-24-14-36-16h-6v21m-57%206c-7%209-13%2025-14%2035v5h41l1-3c0-2%201-6%203-8l2-4-15-15-14-15-4%205m90%2010l-15%2015%202%203c2%203%203%203-9%206-10%203-10%203-8%206l2%203%208-4c10-4%2011-4%2011-1%200%202%201%202%2022%202%2024%200%2022%201%2019-12-2-11-13-33-17-33l-15%2015m-106%2038l1%207v3h8l7%201%202%205%203%206-5%204-4%206c0%202%2019%2021%2020%2021s4-2%206-5l5-4%206%202%206%203v7l1%207h30v-15l6-2%206-2%205%204c2%203%205%205%206%205s20-19%2020-21l-4-6-5-5%202-5%202-6h8c9-1%209-2%209-8v-5l-22-1h-22l-1%206c-8%2025-45%2024-51-1l-1-5h-44v4'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5527950310559007,"src":"/static/493231422a84266271f5b40a73e7bac7/31987/compiler.png","srcSet":"/static/493231422a84266271f5b40a73e7bac7/e1953/compiler.png 250w,\n/static/493231422a84266271f5b40a73e7bac7/46604/compiler.png 500w,\n/static/493231422a84266271f5b40a73e7bac7/31987/compiler.png 1000w,\n/static/493231422a84266271f5b40a73e7bac7/f534f/compiler.png 1240w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/hello-world-rolwins-first-blog","title":"Hello World - Rolwin's first blog 😇","tags":["javascript","html","css"],"excerpt":"Blogging and writing about tech stacks is always been my thing. I like to experiment with different technologies and write my views on them. Web technologies has always been my passion. Check my blog for codebits on various web technologies.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='297'%20viewBox='0%200%20400%20297'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2029v29h4l35-7h2l21-2a1035%201035%200%200189-13l9-1%2014-2%2010-1v-7l-3-16-1-9h-14c-12%200-14%200-14%202h-1c0-2-3-2-52-2a873%20873%200%2000-63%201L17%200H0v29M270%208l1%207-2-1h-4c-2%200-5-5-3-6l-1-2h-4c1%203%200%203-2%201-2-1-2-1-1%201l-1%203-1-2V8c-2-1-6%201-6%202s-2%201-6-1l-1%202v2c2%200%201%202-1%203s-3%200-4-1c-2-2-11-3-12-1l-3%201-2%201-2%201-3%204-1%202c0-2-3-1-5%202l-3%205-39%206A13550%2013550%200%20010%2061a1040%201040%200%200190-10c-2%203-3-4%208%2053%2011%2054%2012%2058%2013%2058a1581%201581%200%200076-13l-2%205c-3%204-4%208-7%2024l-2%2013v10h7c8%200%2018%203%2019%205s-2%2012-4%2013l-1%203-2%205c-2%202-3%204-3%207%200%208-1%209-3%208h-8l-7-1h-7l2-7%202-9v-4l-8%202a313%20313%200%2001-38%207l-7%201-4%202%202%201c3-2%2010-2%2010-1l-5%201c-3%200-3%200-3%203%200%206%201%2011%203%2011l1%202c-1%201%200%203%202%205s3%207%201%207-3%202-3%205c0%202-4%204-5%202l-1-6a338%20338%200%2000-4-23l-1-4-6%201c-5%200-7%200-3-2l-14%201-51%209-37%206v14l1%2014a697%20697%200%200041-10v-2c1-2%204%200%204%202s0%202%202%201a456%20456%200%200160-8l1%202a296%20296%200%20007%2030l12-8c5-4%2034-13%2036-11%201%201-1%203-7%206l-14%2010-6%206h103c108%200%20106%200%20106-4l4-5%204-4%203-3%202-2%203-1%209-1c7-1%207-1%204%206l-3%209-2%205h30a463%20463%200%20000-41c0%204%200%205-3%206-5%201-11%202-17%201h-7l-8%202-15%201-17%202c-12%201-22%203-23%204l-5%201c-3%200-4%200-3%201l2%201%202%202-1%201h-3l-11%202-12%202c-15%202-24-1-26-9-2-4-2-4-12-3-4%201-4%203%200%203l3%201v3h-1l-4-2-6-2c-9-1-15-5-8-5%204%200%2012-3%2012-5l2-2c2-2%201-2-4-4h-7l-11%201c-8%200-9%200-11-2l-5-2c-2%200-5-2-5-5l5-3c1%201%2013-1%2015-2%202-2%203-2%208-1a364%20364%200%200021%205l12%207%2010%206h9c18-1%2051-8%2065-14%2025-11%2030-14%2024-17l-3-4-2-4-2-3-2-4c-1-1-1-2%204-6%206-6%2019-12%2025-12%205%200%206%200%2013%2021%202%203%202%202%202-19v-22l-5%201c-6%200-6%200-10-8l-2-2c0%203-7%206-9%204l-2-1%201%202v2c-2%200-3-2-3-4l2-1c6-3%208-5%207-7l1-1c2%201%203-2%202-5l-2-4v-5l-2-9c0-7-3-17-3-13%200%202%200%202-1%200l-1-4v-2l1%202c1%201%201%201%201-1l-2-3-1-3c1-2%200-3-1-3h-1c0-3-6-9-13-12-8-4-20-6-39-6-25%200-30%201-21%206l4%203%202%203c3%203%203%203%202%206l-7%206h-1l1%201c1%200-3%205-8%208-4%203-5%203-2-1%202-2%203-3%202-4v-2c-2-1-2%200-2%201l-1-3v-11c1-4%200-4-3-7l-3-3-3%202-3%203-1%203-1%207-1%203v-3c0-3%200-3-2-2l-5%201-3%201v-6c1-6%203-13%207-20l3-5%201%202%202%206c0%205%202%205%204%201v-7l-2-7c-1-3-1-4-3-3l-1-1%203-1%201-1c1-1%201-1%202%201%201%203%201%203%205%202%205-1%205-2%202-6s-2-6%202-4c2%201%202%201%202-1-1-3-4-4-7-1-3%204-4%203-1-1l4-3c3%200%203-1%202-11l-1-10-1-1v-2l-1-1-1-3c0-2%200-2-2-2-1%201-2%200-2-1%200-2-3-5-5-5l-1-2c0-1%203-2%2011-3l12-3c1-2%203-3%203-1%201%202%2014%200%2018-3l10-4%205-1%202-1V2l-2-1h2c1-1-14-1-32-1h-33v8m67-7c-1%201-1%201%202%201h1c-3%202-2%203%201%202%206%200%202%201-9%204-9%203-14%203-7%201l3-2-4%201c-3%201-4%201-3%203%202%201%201%201-11%203-9%202-16%204-11%204a143%20143%200%200029-6%20248%20248%200%200035-9c11-3%2011-3%205-3l-10%201h-21m54%204a334%20334%200%20013%2034v10l1%203v6l1%207v9l3%2013%201%2010V82a440%20440%200%2000-6-62l-2-20-1%205M73%2039a812%20812%200%2001-23%204c-1%202%203%202%2013%201a461%20461%200%200123-5c-1-2-1-2-13%200m84%2016h-3l-2%201-1%201-1%201-1%203c-3%202%202%204%207%203%206-1%207-3%201-2-5%200-5-2%200-3l4-1%209-2%2010-2c0-1-3-1-13%201h-8l1-1-3%201m-48%206c-3%200-5%201-5%202l2%201c3-1%206%201%204%202-1%201%200%201%201%201h3l-3%201-1%201v2l1%201c2%200%202%200%201%202v6c-1%201%200%201%201%201%202%200%202%200%201%201l-1%201v2c-1%201-1%201%201%201v2c2%200%202%203-1%206s-3%204%203%204c2%200%202%200%201%201l-1%203v2c-1%200-1%201%201%201v4l1%201v1c-1%201-1%201%201%201l1%201c-2%201-2%204-1%204v1c-1%201-1%201%201%201s2%200%201%201c-2%200-2%201-1%203v9l1%202%201%201v1c-1%201-1%201%201%201l1%201c-2%201-2%204%200%204v1c-2%201-2%201%200%201s2%200%201%201l-3%202-2%201c0-2-1-2-2-2-1%201-2%204%200%206l15-2a42585%2042585%200%200160-12c0-2-1-2-6-1a325%20325%200%2001-30%205l-2%201-2%201c-2-1-14%200-13%201h-2l-5%201-2%201v-1l1-2%201-2c2%200%202%200%200-1-3%200-4-2-1-3%203%200%202-2-1-1l-2-1%201-2%201-1-1-1c-3%200-2-3%200-3%201-1%201-1-1-1l-2-1-1-1-2-1v-2c-1-2%200-2%202-2s4-2%201-2v-3l1-2c2-1%202-3%200-2l-2-1%202-2%202-1-4-1-4-1%201-1%201-1-2-1-2-1%202-2%201-1v-1l1-1-3-1h-3c0-1%206-2%208-1%202%200%202-2%201-3s3-1%208-1l2-2-1-1-1-1-1-1c-1-1%200-1%202-1%203%200%204-2%201-2l2-1%203-1h-4c-3%200-3%200-1-1s0-1-4-1h-5l2-1h-3c-2%200-2%200-1-1l-5-1h-3l1-1c0-1%203-2%2010-3l9-2h-5c-4%200-5%200-4-1v-3c0-2%201-2%204-2l4-1-4-1h-3c3%200%202-2-1-2-6%202-13%202-13%201h-7m64%203l-4%201h-3l-2%201h-6c-10%202-9%202-9%206l1%205h4v-3h4c0%203%201%203%2010%201l16-3h-2l-3-1%202-1c1%201%205-2%204-3l1-2c1-2-11-2-13-1m33%2012l2%207c2%203%202%205%201%207l-1%205%201-1c1-3%203-4%203-2%200%201%208%204%2013%204l9-2c7-4%2018-8%2023-8%206-1%206%200%201%207l-2%205c4%201%2014-18%2012-22-1-2-12-3-16-1l-6%202-4%201c-2%202-3%202-4%201h-4c-2%201-2%201-2-1h-1l-3%202v2c0%204-2%206-6%204l-4-1-2-1h-1l-2-2-2-2-1-1-2-3c-2-2-2-2-2%200m-26%203h-1c-2-1-13%200-24%203-3%200-3%200-2-1v-1c-2%200-2%201-2%204l1%205c0%202%201%202%203%202%203%200%204-1%202-3-3-3-2-3%201-3%202%200%202%201%202%203s1%202%203%202l19-4c1-1%200-1-1-1-2%200-2%200-1-1l1-2c-1-1%202-4%203-3l-1%202v1l1%201%201%203%201-1h2l4-1c0-1-1-2-3-2s-2-1-2-3-6-3-7%200m-6%2013c-22%203-22%203-20%205%200%202%2012%200%2014-1%202-2%206-3%2014-4%206%200%2014-2%2014-3l-1-1-21%204m33%208c-1%206%200%205-17%208-26%204-28%205-26%203l9-2a312%20312%200%200024-5%20294%20294%200%2000-42%208l4%201-1%201h-2c-2%200-2%200%200%201s2%201%201%203l-1%201%202%201c1%201%2013-1%2013-2h-10c0-3%203-4%2033-9%2013-2%2014-2%2014-9%200-5-1-5-1%200m-5%2017a1548%201548%200%2001-46%2010c1%202%2033-3%2034-5l10-3%2010-2h-8m-17%2011l-16%201c-11%201-13%202-7%204%204%201%206%204%203%204l-1%201c1%201%2012-1%2012-3l3-1c2%200%202-1%202-2l2-2v1l1%201h1v1l2-2%202-2c1-1%202%200%202%201h-1l-2%201c0%203%207%200%208-3%200-2%200-2-11%200m81%2058l-3%203h-5c-6-5-10-3-10%205%200%204%200%205-2%206-6%202-7%209-3%2011%202%200%202%201%201%202-2%206%200%209%207%207h7c6%204%2012%201%2010-5%200-2%200-3%204-7%205-5%205-7%200-9-3-2-3-3-3-6v-4l-1%202c0%205-3%207-5%203%200-3%203-6%206-6h1c0-3-1-3-4-2m-10%2015c-3%205-2%2010%202%2011%203%201%206-3%206-9%200-4%200-4-3-4s-4%201-5%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3513513513513513,"src":"/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/4fe8c/rolwin.jpg","srcSet":"/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/aabdf/rolwin.jpg 150w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/9dc27/rolwin.jpg 300w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/4fe8c/rolwin.jpg 600w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/9842e/rolwin.jpg 900w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/47498/rolwin.jpg 1200w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/b4640/rolwin.jpg 2034w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/react–the-future-of-web-frontend","title":"React – The Future Of Web Frontend","tags":["reactjs","javascript","typescript","html","css"],"excerpt":"Working with ReactJS - A library by facebook was a great experience for me. React has made building web apps easy by making use of reusable components. This is clearly my viewpoint about the library.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m65-36c-2%203-3%209-1%2019%200%202%200%203-6%205-16%206-16%2018%200%2023l6%203-1%206c-3%2018%208%2023%2022%2011l4-3%203%203c12%2011%2022%208%2022-6v-6l-1-6%204-1c18-5%2018-19%201-25l-5-1%201-4c3-18-6-26-19-16l-6%204c-1%201-2%201-4-1-7-7-15-9-20-5m3%203c-1%202-2%2010-1%2015%201%203%202%203%2011%201%202%200%208-8%207-10-5-5-14-9-17-6m29%203l-6%204%203%204%204%205%2011%201%201-7c2-11-3-14-13-7m53%206c-2%202-2%203-2%2024%200%2026%200%2027%207%2027%204%200%205-2%205-12v-9h8c9%200%2012%202%2012%209%200%209%202%2012%208%2012%204%200%205-3%204-8l-1-9c0-4-1-6-4-8-2-1-2-1%200-2%206-3%208-13%204-19s-7-6-24-7c-14%200-15%200-17%202m183%202l-1%205c0%204%200%205-3%206-4%201-4%205%200%206h3v14c0%2013%201%2014%203%2016%204%204%2016%202%2016-2%200-2-3-4-6-4h-2v-24h3l4-1c1-3%200-5-4-5-3%200-3%200-3-3%200-7-2-9-5-9l-5%201m-173%2012l1%207h8c10%200%2012-1%2012-6%200-6-2-7-12-8h-9v7m-80-1l-4%207-2%204%203%206c4%206%205%207%2012%207%206%200%209-3%2012-10l2-4-3-6-4-5-7-1c-7%200-8%200-9%202m135-1c-17%204-21%2029-6%2037%2012%206%2031-1%2026-9-1-2-3-2-8%200-5%204-10%204-14%200l-3-5c0-2%200-2%2014-2%2016%200%2016%200%2014-8-3-10-13-16-23-13m42%200c-8%203-12%208-9%2012%202%202%205%201%208-1%205-5%2014-5%2014%201%200%203-1%203-11%205-12%201-17%207-14%2015%203%207%2013%209%2022%205l4-2c0%203%208%205%2010%203%201-2%200-31-2-33-4-5-14-7-22-5m45%200c-9%203-13%209-13%2020-1%2013%206%2019%2019%2019%209-1%2013-3%2015-8%201-3%201-3-1-5-3-3-4-3-8%202-7%207-15%203-15-8s9-16%2015-9c3%204%206%204%208%201%205-7-9-15-20-12m-245%205c-10%205-9%2011%203%2015l5%202%203-5c2-5%202-5%200-10-3-6-4-6-11-2m53%202c-3%206%200%2015%203%2014%2016-4%2018-11%206-17-7-3-7-3-9%203m-26%200c-6%206%203%2015%209%2010%203-2%203-6%201-9-3-4-8-4-10-1m129%203c-4%204-4%205%206%205%2011%201%2010%201%208-3-3-6-9-7-14-2m51%2013c-9%201-11%205-7%208%204%204%2013-1%2013-7v-3l-6%202m-196%206c-2%207-2%209-1%2012l3%205c3%200%2010-3%2013-7l3-2-4-5c-5-5-14-7-14-3m33-1c-2%200-5%202-6%205l-4%204%204%203c11%209%2018%206%2015-7-1-6-2-7-9-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/static/ca31f74a20da556b69057d20ff6abaf2/2a4de/preview.png","srcSet":"/static/ca31f74a20da556b69057d20ff6abaf2/6d161/preview.png 150w,\n/static/ca31f74a20da556b69057d20ff6abaf2/630fb/preview.png 300w,\n/static/ca31f74a20da556b69057d20ff6abaf2/2a4de/preview.png 600w,\n/static/ca31f74a20da556b69057d20ff6abaf2/db955/preview.png 900w,\n/static/ca31f74a20da556b69057d20ff6abaf2/f3583/preview.png 1200w,\n/static/ca31f74a20da556b69057d20ff6abaf2/eeb1b/preview.png 1920w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/django-the-widely-used-python-framework-for-web-development","title":"Django – The widely used python framework for web development","tags":["python","html","css"],"excerpt":"Django is a widely used python framework for web development. Learn what makes django so popular for backend development and why many startups and Tech giants prefer Django.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m0%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/2a4de/django.png","srcSet":"/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/6d161/django.png 150w,\n/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/630fb/django.png 300w,\n/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/2a4de/django.png 600w,\n/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/db955/django.png 900w,\n/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/f3583/django.png 1200w,\n/static/600b89b5e2a7a8d8ef6e3d2a010bd48d/5707d/django.png 1600w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/promises-in-javascript","title":"Working with promises in Javascript","tags":["javascript","typescript","nodejs","reactjs"],"excerpt":"Let's talk about promises in javascript. What exactly is a promise in javascript and how to handle promises. This article will talk about the different methods to resolve promises.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='244'%20viewBox='0%200%20400%20244'%20preserveAspectRatio='none'%3e%3cpath%20d='M187%2010c-17%204-29%2017-33%2034l-1%205h-8c-9%200-10%201-12%2010-2%2011-2%2011-8%2011-16-1-27%2018-29%2050%200%2012%200%2012%202%2014l5%203%202%201-13%2043c-13%2040-15%2048-12%2051%202%202%20235%202%20237-1%203-2%202-8-6-33l-8-25%205-1c8%200%2010-1%2011-3%204-5%203-7-1-13-12-14-16-26-17-50-1-20-2-24-12-33l-5-5h-21c-18%200-20%200-20-2a46%2046%200%2000-56-56m-46%2051c-1%206-4%2015-6%2016l-9%201c-6%200-7%200-10%203-7%207-12%2022-12%2040v9h16l-2%207-9%2034-7%2026%202%207c2%208%202%209%208%207l5-1h-6c-3%200-4%200-3-1%203%200%203%200%202-3l-1-3a215%20215%200%200136%201l-4%203c-2%201-1%202%2022%202l24%201h-50a251%20251%200%200070%200c7%200%207%200%2012-2h19l34%203h20l1-7%202-7-4-16-4-16%2014-1%2013-1-3-4a89%2089%200%2001-18-57c0-12-2-19-9-24l-4-3h-32l-32%201%203%206%203%209%201%203-7-1c-9%200-15%202-16%206l-1%203-14-1-15-1c-1%200%202-11%204-14%203-4%206-5%2010-2l4%202%201-2c3-4%204-13%204-21v-6l-26-1h-26v5m85%2046c1%208%202%2012%204%2010l1%201c1%201%206%200%206-1h3l1-1v1h6l1-1h3l3-1%201-2c2%202%203-3%201-6-1-3-1-3-2-2h-2c-2-2-2-2%203-2%203%200%201-1-5-1l-12%201h-1l1-1-6-2-2%202-2%202c-2-1-1-4%201-4%201-1%201-1-1-1l-2-1v9m-85%2058l-3%2011h-8c-2-2-8%200-9%202-1%204%2015%206%2022%203%204-3%205-4%206-14%203-13%203-12-2-12h-5l-1%2010m20-8c-7%204-3%2010%208%2013l7%203c2%204-8%206-13%202-3-2-11%200-8%203%203%204%2018%206%2024%203%2010-5%208-11-4-15-8-2-9-4-8-6h13l3-2-3-1c-4-3-15-3-19%200m48%2031c-3%201-9%206-9%208l3-1c5-5%2010-5%2025-4l14%202-8-3c-10-3-20-3-25-2'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.6483516483516483,"src":"/static/c2e2602606aecbaead43ebcb31d5fc22/2a4de/javascript.png","srcSet":"/static/c2e2602606aecbaead43ebcb31d5fc22/6d161/javascript.png 150w,\n/static/c2e2602606aecbaead43ebcb31d5fc22/630fb/javascript.png 300w,\n/static/c2e2602606aecbaead43ebcb31d5fc22/2a4de/javascript.png 600w,\n/static/c2e2602606aecbaead43ebcb31d5fc22/5e6f2/javascript.png 789w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/top-7-rxjs-patterns","title":"What are and how to use Observables in RxJS","tags":["typescript","javascript","rxjs"],"excerpt":"Learn all that you need to know about Observables The following is an Observable that pushes the values `1`, `2`, `3` immediately (synchronously) when subscribed.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m303-88c-5%205-8%206-14%207-5%201-7%204-7%209s-1%208-6%2012c-3%203-4%204-1%2015l-1%207-2%204%203%205%208%2012c16%2033%2062%2041%2087%2017%205-5%2012-15%2011-16l-8%204c-8%204-10%204-4-1%209-6%2014-16%2014-26v-5l-3%205c-6%208-7%208-4%200s3-13%200-19l-2-4-1%209c-1%2012-4%2018-12%2028-4%203-6%206-6%207l7-1%207-2c2%202-21%2013-27%2013-2%200%201%203%206%205l6%203h-6c-9%200-19-4-30-13l-4-3%204%2010c5%205%200%203-7-3-15-15-12-38%206-47%205-3%209-3%2015%200%2010%205%2028%207%2034%204%2015-8-15-36-38-36l-8-2c-8-4-11-4-17%202m-169%203v15l-1%2015c-2%202-2%202-1%204%202%202%202%202%205%201%204-2%204-3%204-20V28h-7m18%201c-8%205-5%2012%207%2019%2010%206%207%2012-4%209-5-2-5-2-5%201-1%203-1%204%205%205%209%202%2017-2%2017-9%200-5-1-7-9-11l-8-6c-1-3%206-5%2011-3%202%201%202%201%203-2l1-3c-4-3-13-3-18%200M73%2046v17h7v-6c0-7%200-7%203-7%203-1%203%200%207%206%203%207%204%207%207%207h4l-3-5c-6-10-6-10-3-13l3-6c0-8-4-11-16-11h-9v18m7-7v5h3c5%200%208-2%208-5%200-4-3-6-8-6h-3v6m23%200l4%206%204%205-4%206-5%207h4l4-1%203-4%202-2%203%203c3%203%204%204%207%204%204%200%204%200-1-7l-4-5%204-6%205-7h-4c-3%200-4%201-6%203-3%205-3%205-6%201-3-3-4-4-7-4l-3%201M34%2086c-10%203-11%2023-1%2028h11c1-1%202%200%203%201%202%202%205-1%203-3v-3c4-5%201-19-4-22-3-1-8-2-12-1m78%2013v15h3c3%200%203%200%203-3-1-5%201-6%204-1%202%203%203%204%206%204h3l-4-6-3-5%203-3c2-3%202-3%201-5-2-1-2-1-6%202l-4%204v-8c0-7-1-8-3-8h-3v14m35-13c-3%202-4%204-4%208%200%203%203%206%2010%209%207%204%202%209-6%206h-3l-1%202%203%203c14%205%2022-8%2010-15-8-4-9-6-7-8h6l4-1c1-2%201-3-3-4h-9m20%206l-1%202-2%202%202%202%201%207c0%205%200%206%202%208s8%203%209%201c1-1%200-4-2-4-2%201-4-2-4-7%200-4%201-5%203-5%203%200%202-3-1-4-1%200-2-1-2-3l-2-2c-2%200-3%201-3%203m52%200l-1%202-2%202%202%202%201%207c0%206%200%207%202%208%202%202%208%203%209%201%201-1%200-4-2-4-2%201-4-1-4-7%200-4%201-5%203-5s2%200%201-2l-2-2-2-2c0-2%200-3-2-3s-3%201-3%203M35%2092c-6%206-4%2018%203%2018%203%200%203%200%202-2-2-2%201-5%203-3s3%200%203-5c0-8-7-13-11-8m22%2010c0%2011%201%2013%208%2013l8-1h3V95l-3-1h-3v7c0%207%200%208-2%209-5%202-6%200-6-9%200-7%200-7-2-7-3%200-3%200-3%208m36-6c-2%202-2%204-2%208%200%209%206%2013%2014%2010%204-2%202-5-2-4-6%200-9-6-5-10%202-2%203-2%205-1l4-1c2-5-10-5-14-2m90-1c-1%203%201%204%205%204%206%201%207%203%201%203-4%200-8%203-8%207%200%203%205%206%208%206l7-1h3v-8c-1-7-1-9-3-10-3-2-12-3-13-1m20%209v10h6v-7c0-6%200-6%203-7%202-1%203-2%203-4s-2-3-5-1c-2%202-2%202-3%200-3-3-4-1-4%209m-69%2070v27h54v-54h-54v27m38-2c-6%203-5%2011%203%2014l4%204c-1%202-5%203-7%201-1-1-5%200-5%201%200%202%205%205%209%205%208%200%2011-9%204-14-7-4-8-5-6-6h7c4-3-4-7-9-5m-13%208l-1%2010c0%202-3%202-5%201h-3c-1%202-1%202%201%204%203%203%208%203%2011%200%202-3%202-4%202-13v-10h-2c-3%200-3%200-3%208'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/2a4de/preview.png","srcSet":"/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/6d161/preview.png 150w,\n/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/630fb/preview.png 300w,\n/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/2a4de/preview.png 600w,\n/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/db955/preview.png 900w,\n/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/f3583/preview.png 1200w,\n/static/f6ba40d4b6b9afdab4f9ab1de7cd7463/76f6f/preview.png 1921w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/why-i-migrated-my-website-from-wordpress-to-gatsby","title":"Why I migrated my website from wordpress to gatsby? (gatsby vs wordpress)","tags":["javascript","gatsby","typescript"],"excerpt":"While building a CMS for blogging, worpdress is the most commonly used platform. Gatsby has also topped the list recently. This article talk which one to go for and why I shifted from wordpress to gatsby. Is gatsby better than wordpress is the question I would be answering.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m170-45c-4%203-5%208-5%2020l1%209-6%202c-11%205-19%2013-18%2019%202%206%209%2012%2019%2016l5%201v12c-1%2013%201%2017%207%2020h8c4-1%2017-9%2019-11l6%204c14%2010%2026%2010%2029-1v-20c-1-3-1-3%207-7%2021-10%2021-22%200-32l-8-3%201-5c4-26-9-35-29-19l-6%204-4-3c-10-9-20-11-26-6m4%203c-4%202-5%2022-2%2023h8c6-1%207-2%2010-5l4-5c3-3%203-3-2-7-8-6-15-8-18-6m43%201c-5%202-12%208-12%209s2%204%205%206c4%205%204%206%2011%207l8%201%201-10c0-14-3-17-13-13M64%2074c-11%204-21%2013-26%2024-5%2010-5%2025%200%2036%2015%2029%2054%2032%2073%205%2016-23%205-56-23-64-6-2-18-2-24-1m247%201a42%2042%200%201017%2082%2042%2042%200%2000-17-82m-5%206c-6%203-9%205-14%2010-4%204-4%205%204%204l6%201-2%202c-4%200-4-1%203%2019%208%2024%207%2023%2012%2010%203-11%203-12%202-16-2-9-5-13-8-13l-2-1c1-2%2023-2%2024-1l-1%202h-3c-2%201-1%205%205%2021l7%2019%206-25c0-2-1-6-4-10-3-8-3-10%201-14l2-2-3-2c-9-6-25-8-35-4M66%2084a33%2033%200%2000-22%2024%20286%20286%200%200043%2039c12-5%2021-16%2022-28l1-3H89l-1%202v3h7l8%201c0%205-12%2019-17%2019l-35-35%202-4c7-15%2030-18%2043-6l3%203%202-2%202-2-4-3c-8-9-23-12-33-8m128%2014c-5%200-4%200-11%2011l-4%207%203%205%205%2010%203%204h21l5-9c6-10%206-10%200-19l-4-8-6-1h-12m159%206l-13%2042c-3%207%209-5%2013-13%204-7%205-23%202-29l-2-4v4m-191%200c-18%208-18%2016-2%2024%207%203%208%203%2010-5l3-7-3-7-2-7-6%202m68%205l-2%208%202%206c3%208%203%208%2012%204%206-4%2011-8%2011-11%200-2-7-9-12-11-9-4-8-4-11%204m54-4c-2%205-2%2019%201%2026%202%206%2013%2018%2016%2018%202%200%201-2-10-33-6-16-6-15-7-11m-88%201c-8%204-8%2015-1%2019%2010%206%2021-7%2014-15-5-5-8-6-13-4M43%20121c2%209%209%2019%2018%2024%203%202%2013%204%2013%203l-29-30c-2-1-2-1-2%203m277-1a644%20644%200%2001-10%2031c0%203%2017%204%2021%201%201%200%200-4-4-14l-7-18m-149%2018c-1%203-1%2018%201%2021%203%205%2012%203%2021-4l3-4-5-6c-5-5-5-6-10-6l-7-2-3%201m50%200c-6%202-8%202-10%205l-5%206-2%202%205%204c9%207%2017%209%2020%204%202-4%201-22-1-22l-7%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/static/245aecc3e8c42b31f1e4796cebebd2ce/4fe8c/gatsby-wordpress.jpg","srcSet":"/static/245aecc3e8c42b31f1e4796cebebd2ce/aabdf/gatsby-wordpress.jpg 150w,\n/static/245aecc3e8c42b31f1e4796cebebd2ce/9dc27/gatsby-wordpress.jpg 300w,\n/static/245aecc3e8c42b31f1e4796cebebd2ce/4fe8c/gatsby-wordpress.jpg 600w,\n/static/245aecc3e8c42b31f1e4796cebebd2ce/f9913/gatsby-wordpress.jpg 750w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/center-align-things-with-css","title":"Center aligning content with CSS and flex-box","tags":["html","css","reactjs"],"excerpt":"Many a time I noticed that people find it very difficult to align content to the center either vertically or horizontally using CSS. So let's see few ways in how you can align content with css.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20134v133h401V0H0v134m41-69v12h154V52H41v13m167-1v12h72V52h-72v12m81%202l1%2015h72V52h-73v14m-81%2023v7h72V81h-72v8M42%2084l-1%2026v25h73V84l-36-1-36%201m81%201v83h72V83h-36c-33%200-36%200-36%202m166%2011v10h73V86h-73v10m-81%2018v13h72v-26h-72v13m82%205v7h71v-15h-71v8m-82%2031v18h153v-36H208v18m-167%203l1%2015h71v-29H41v14m41%2032c-10%205-6%2019%205%2019%204%200%206%202%204%203-2%202-5%202-7%200l-4-1c-5%200-5%203%200%207%207%207%2019%202%2019-7%200-5-2-8-9-9-4%200-7-2-6-4s6-1%207%201c1%201%207%202%207%200%201-1-1-6-3-7-4-3-9-3-13-2m32%200a9%209%200%20002%2018c7%202%209%204%203%205l-5-1c-1-1-2-2-4-1-3%200-3%200-3%203%202%207%2016%209%2021%204%205-7%202-14-7-16-5%200-5-1-5-3s5-3%206-1c1%203%207%203%207%200%200-5-7-10-11-9l-4%201m197%201l-5%201-2%204c-4%205-4%2013-1%2018%206%2010%2021%209%2026-1%206-14-5-27-18-22m-265%202c-11%209-6%2027%209%2027%206%201%2010-2%2012-7%202-4%202-5-2-5-3%200-4%201-5%203-4%205-11%202-12-5s7-11%2011-6l6%202c4%200%204-1%202-5-3-7-15-10-21-4m109%2012l1%2015%203%201h4v-10h9v-8h-4c-5%200-5%200-5-3s0-3%205-3%205%200%205-3c1-4%201-4-9-4h-9v15m28%200v16h18v-8h-10v-22l-4-1h-4v15m27%201v15h18v-8h-5c-5%200-5%200-5-3%200-2%200-2%204-2l5%201v-8h-4c-4%200-5%200-5-2s1-2%205-2h5v-7h-18v16m26-16l4%208%204%206-2%204-5%208c-2%204-2%205%203%205%203-1%204-1%206-4%202-5%203-6%205-1l3%204h8l-4-7c-5-9-5-8%200-15%204-8%204-8-1-8-3%200-4%200-6%204l-2%203-2-3c-2-4-3-4-7-4h-4m34%2015l1%2015h9c7%200%209-1%2011-3%202-3%203-8%201-11-1-1-2-2-1-4%202-4%201-6-2-9s-3-3-11-3h-8v15m67-14l4%207%204%206-5%207c-6%209-5%2010%203%209l3-4c3-5%203-5%206%200%203%204%203%205%207%205%204-1%204-1-1-9s-5-7%200-15c4-7%204-7-1-7-3%200-4%200-5%204l-3%203-2-3c-2-4-2-4-6-4l-4%201m-26%209c-5%207%203%2017%209%2011%203-3%203-9%200-11-3-3-8-2-9%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5,"src":"/static/1c65e8062d6b8d416bbfb2c1b729e891/4fe8c/flexbox-css.jpg","srcSet":"/static/1c65e8062d6b8d416bbfb2c1b729e891/aabdf/flexbox-css.jpg 150w,\n/static/1c65e8062d6b8d416bbfb2c1b729e891/9dc27/flexbox-css.jpg 300w,\n/static/1c65e8062d6b8d416bbfb2c1b729e891/4fe8c/flexbox-css.jpg 600w,\n/static/1c65e8062d6b8d416bbfb2c1b729e891/9842e/flexbox-css.jpg 900w,\n/static/1c65e8062d6b8d416bbfb2c1b729e891/8e2a4/flexbox-css.jpg 1140w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/code-splitting-in-react","title":"Code splitting in react with React.lazy() and Suspense","tags":["html","css","reactjs"],"excerpt":"Suppose the bundle size of your project is very huge and you don't want to load everything at once during the initial render you can use code splitting along with React to improve the performance and load time of your application.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='219'%20viewBox='0%200%20400%20219'%20preserveAspectRatio='none'%3e%3cpath%20d='M221%2013A234468%20234468%200%200086%2058c6%2015-8%2035-25%2035-9%200-21-7-24-16l-3-4-17%205-16%206-1%2067v68h401v-26l-1-110V0H260l-39%2013m61%2040v14h28V39h-28v14m1%200v13h26V40h-26v13M155%2083c-2%201-9%2011-9%2013s-2%201-2-2c-2-10-15-15-15-5%200%204%204%208%2010%2010%2015%206%2037-9%2024-15-3-2-5-2-8-1m-1%205l-4%207-3%204%203-1c6-1%2012-4%2013-6%202-6-5-8-9-4m-29%2023v8h18v-5l1-9v-3h-19v9m22%2020v8h19v-17h-19v9'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.829268292682927,"src":"/static/9fe51c6e6dab4ae76d9944746bfff13e/2a4de/codesplitting.png","srcSet":"/static/9fe51c6e6dab4ae76d9944746bfff13e/6d161/codesplitting.png 150w,\n/static/9fe51c6e6dab4ae76d9944746bfff13e/630fb/codesplitting.png 300w,\n/static/9fe51c6e6dab4ae76d9944746bfff13e/2a4de/codesplitting.png 600w,\n/static/9fe51c6e6dab4ae76d9944746bfff13e/db955/codesplitting.png 900w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}}]}},"pageContext":{"postPath":"blog/how-to-build-your-own-compiler","translations":[{"hreflang":"en","path":"blog/how-to-build-your-own-compiler/"}]}}}