{"version":3,"sources":["../../src/commands/develop-process.ts"],"names":["tracer","setTimeout","process","send","setInterval","type","telemetry","trackCli","on","msg","action","exit","payload","module","exports","program","bootstrapSpan","startSpan","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","reporter","panic","chalk","yellow","cyan","openTracingConfigFile","pendingActivity","id","startBackgroundUpdate","port","parseInt","e","message","app","developConfig","initial","states","initializing","invoke","src","onDone","target","actions","initializingDataLayer","data","parentSpan","store","firstRun","finishingBootstrap","gatsbyNodeGraphQLFunction","finish","runningQueries","graphqlRunner","doingEverythingElse","workerPool","boundActionCreators","setProgramStatus","ProgramStatus","BOOTSTRAP_QUERY_RUNNING_FINISHED","db","saveState","requiresWriter","startListener","startAutosave","queryUtil","startListeningToDevelopQueue","graphqlTracing","queryWatcher","startWatchDeletePage","service","services","initializeDataLayer","dataLayerMachine","initialize","runQueries","queryRunningMachine","assignStoreAndWorkerPool","_context","event","assignDataLayer","_","withContext","isInterpreter","actor","listeners","WeakSet","last","onTransition","state","changed","matches","verbose","JSON","stringify","value","children","forEach","child","has","sublast","substate","add","start"],"mappings":"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","sourcesContent":["import { syncStaticDir } from \"../utils/get-static-dir\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport chalk from \"chalk\"\nimport telemetry from \"gatsby-telemetry\"\nimport express from \"express\"\nimport { bootstrapSchemaHotReloader } from \"../bootstrap/schema-hot-reloader\"\nimport bootstrapPageHotReloader from \"../bootstrap/page-hot-reloader\"\nimport { initTracer } from \"../utils/tracer\"\nimport db from \"../db\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport onExit from \"signal-exit\"\nimport queryUtil from \"../query\"\nimport queryWatcher from \"../query/query-watcher\"\nimport * as requiresWriter from \"../bootstrap/requires-writer\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport {\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n} from \"../utils/feedback\"\nimport { startRedirectListener } from \"../bootstrap/redirects-writer\"\nimport { markWebpackStatusAsPending } from \"../utils/webpack-status\"\n\nimport { IProgram } from \"./types\"\nimport {\n  startWebpackServer,\n  writeOutRequires,\n  IBuildContext,\n  initialize,\n  postBootstrap,\n  rebuildSchemaWithSitePage,\n  writeOutRedirects,\n} from \"../services\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { ProgramStatus } from \"../redux/types\"\nimport {\n  MachineConfig,\n  AnyEventObject,\n  assign,\n  Machine,\n  DoneEventObject,\n  interpret,\n  Actor,\n  Interpreter,\n  State,\n} from \"xstate\"\nimport { DataLayerResult, dataLayerMachine } from \"../state-machines/data-layer\"\nimport { IDataLayerContext } from \"../state-machines/data-layer/types\"\nimport { globalTracer } from \"opentracing\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { queryRunningMachine } from \"../state-machines/query-running\"\n\nconst tracer = globalTracer()\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\n// Time for another story...\n// When the parent process is killed by SIGKILL, Node doesm't kill spawned child processes\n// Hence, we peiodically send a heart beat to the parent to check if it is still alive\n// This will crash with Error [ERR_IPC_CHANNEL_CLOSED]: Channel closed\n// and kill the orphaned child process as a result\nif (process.send) {\n  setInterval(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    process.send!({\n      type: `HEARTBEAT`,\n    })\n  }, 1000)\n}\n\nonExit(() => {\n  telemetry.trackCli(`DEVELOP_STOP`)\n})\n\nprocess.on(`message`, msg => {\n  if (msg.type === `COMMAND` && msg.action.type === `EXIT`) {\n    process.exit(msg.action.payload)\n  }\n})\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  const bootstrapSpan = tracer.startSpan(`bootstrap`)\n\n  // We want to prompt the feedback request when users quit develop\n  // assuming they pass the heuristic check to know they are a user\n  // we want to request feedback from, and we're not annoying them.\n  process.on(\n    `SIGINT`,\n    async (): Promise<void> => {\n      if (await userPassesFeedbackRequestHeuristic()) {\n        showFeedbackRequest()\n      }\n      process.exit(0)\n    }\n  )\n\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    reporter.panic(\n      `The flag ${chalk.yellow(\n        `GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES`\n      )} is not available with ${chalk.cyan(\n        `gatsby develop`\n      )}, please retry using ${chalk.cyan(`gatsby build`)}`\n    )\n  }\n  initTracer(program.openTracingConfigFile)\n  markWebpackStatusAsPending()\n  reporter.pendingActivity({ id: `webpack-develop` })\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  try {\n    program.port = await detectPortInUseAndPrompt(port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  const app = express()\n\n  const developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n    id: `build`,\n    initial: `initializing`,\n    states: {\n      initializing: {\n        invoke: {\n          src: `initialize`,\n          onDone: {\n            target: `initializingDataLayer`,\n            actions: `assignStoreAndWorkerPool`,\n          },\n        },\n      },\n      initializingDataLayer: {\n        invoke: {\n          src: `initializeDataLayer`,\n          data: ({ parentSpan, store }: IBuildContext): IDataLayerContext => {\n            return { parentSpan, store, firstRun: true }\n          },\n          onDone: {\n            actions: `assignDataLayer`,\n            target: `finishingBootstrap`,\n          },\n        },\n      },\n      finishingBootstrap: {\n        invoke: {\n          src: async ({\n            gatsbyNodeGraphQLFunction,\n          }: IBuildContext): Promise<void> => {\n            // These were previously in `bootstrap()` but are now\n            // in part of the state machine that hasn't been added yet\n            await rebuildSchemaWithSitePage({ parentSpan: bootstrapSpan })\n\n            await writeOutRedirects({ parentSpan: bootstrapSpan })\n\n            startRedirectListener()\n            bootstrapSpan.finish()\n            await postBootstrap({ parentSpan: bootstrapSpan })\n\n            // These are the parts that weren't in bootstrap\n\n            // Start the createPages hot reloader.\n            bootstrapPageHotReloader(gatsbyNodeGraphQLFunction)\n\n            // Start the schema hot reloader.\n            bootstrapSchemaHotReloader()\n          },\n          onDone: {\n            target: `runningQueries`,\n          },\n        },\n      },\n      runningQueries: {\n        invoke: {\n          src: `runQueries`,\n          data: ({\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            firstRun,\n          }: IBuildContext): IQueryRunningContext => {\n            return {\n              firstRun,\n              program,\n              store,\n              parentSpan,\n              gatsbyNodeGraphQLFunction,\n              graphqlRunner,\n            }\n          },\n          onDone: {\n            target: `doingEverythingElse`,\n          },\n        },\n      },\n      doingEverythingElse: {\n        invoke: {\n          src: async ({ workerPool, store, app }): Promise<void> => {\n            // All the stuff that's not in the state machine yet\n\n            await writeOutRequires({ store })\n            boundActionCreators.setProgramStatus(\n              ProgramStatus.BOOTSTRAP_QUERY_RUNNING_FINISHED\n            )\n\n            await db.saveState()\n\n            await waitUntilAllJobsComplete()\n            requiresWriter.startListener()\n            db.startAutosave()\n            queryUtil.startListeningToDevelopQueue({\n              graphqlTracing: program.graphqlTracing,\n            })\n            queryWatcher.startWatchDeletePage()\n\n            await startWebpackServer({ program, app, workerPool })\n          },\n          onDone: {\n            actions: assign<IBuildContext, any>({ firstRun: false }),\n          },\n        },\n      },\n    },\n  }\n\n  const service = interpret(\n    Machine(developConfig, {\n      services: {\n        initializeDataLayer: dataLayerMachine,\n        initialize,\n        runQueries: queryRunningMachine,\n      },\n      actions: {\n        assignStoreAndWorkerPool: assign<IBuildContext, DoneEventObject>(\n          (_context, event) => {\n            const { store, workerPool } = event.data\n            return {\n              store,\n              workerPool,\n            }\n          }\n        ),\n        assignDataLayer: assign<IBuildContext, DoneEventObject>(\n          (_, { data }): DataLayerResult => data\n        ),\n      },\n    }).withContext({ program, parentSpan: bootstrapSpan, app, firstRun: true })\n  )\n\n  const isInterpreter = <T>(\n    actor: Actor<T> | Interpreter<T>\n  ): actor is Interpreter<T> => `machine` in actor\n\n  const listeners = new WeakSet()\n  let last: State<IBuildContext, AnyEventObject, any, any>\n\n  service.onTransition(state => {\n    if (!last) {\n      last = state\n    } else if (!state.changed || last.matches(state)) {\n      return\n    }\n    last = state\n    reporter.verbose(`Transition to ${JSON.stringify(state.value)}`)\n    // eslint-disable-next-line no-unused-expressions\n    service.children?.forEach(child => {\n      // We want to ensure we don't attach a listener to the same\n      // actor. We don't need to worry about detaching the listener\n      // because xstate handles that for us when the actor is stopped.\n\n      if (isInterpreter(child) && !listeners.has(child)) {\n        let sublast = child.state\n        child.onTransition(substate => {\n          if (!sublast) {\n            sublast = substate\n          } else if (!substate.changed || sublast.matches(substate)) {\n            return\n          }\n          sublast = substate\n          reporter.verbose(\n            `Transition to ${JSON.stringify(state.value)} > ${JSON.stringify(\n              substate.value\n            )}`\n          )\n        })\n        listeners.add(child)\n      }\n    })\n  })\n  service.start()\n}\n"],"file":"develop-process.js"}