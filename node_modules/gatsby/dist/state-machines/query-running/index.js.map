{"version":3,"sources":["../../../src/state-machines/query-running/index.ts"],"names":["queryStates","initial","states","extractingQueries","id","invoke","src","onDone","actions","target","writingRequires","calculatingDirtyQueries","runningStaticQueries","runningPageQueries","waitingForJobs","done","type","queryRunningMachine","queryActions","services","queryRunningServices"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEO,MAAMA,WAA0D,GAAG;AACxEC,EAAAA,OAAO,EAAG,mBAD8D;AAExEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,EAAE,EAAG,oBADY;AAEjBC,MAAAA,MAAM,EAAE;AACND,QAAAA,EAAE,EAAG,oBADC;AAENE,QAAAA,GAAG,EAAG,gBAFA;AAGNC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,OAAO,EAAG,oBADZ;AAEEC,UAAAA,MAAM,EAAG;AAFX,SADM;AAHF;AAFS,KADb;AAcNC,IAAAA,eAAe,EAAE;AACfL,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENF,QAAAA,EAAE,EAAG,kBAFC;AAGNG,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAAG;AADH;AAHF;AADO,KAdX;AAuBNE,IAAAA,uBAAuB,EAAE;AACvBN,MAAAA,MAAM,EAAE;AACND,QAAAA,EAAE,EAAG,2BADC;AAENE,QAAAA,GAAG,EAAG,uBAFA;AAGNC,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAAG,sBADH;AAEND,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADe,KAvBnB;AAiCNI,IAAAA,oBAAoB,EAAE;AACpBP,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENF,QAAAA,EAAE,EAAG,wBAFC;AAGNG,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAAG;AADH;AAHF;AADY,KAjChB;AA0CNI,IAAAA,kBAAkB,EAAE;AAClBR,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,gBADA;AAENF,QAAAA,EAAE,EAAG,sBAFC;AAGNG,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAAG,gBADH;AAEND,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADU,KA1Cd;AAqDNM,IAAAA,cAAc,EAAE;AACdT,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,0BADA;AAENF,QAAAA,EAAE,EAAG,kBAFC;AAGNG,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAAG;AADH;AAHF;AADM,KArDV;AA8DNM,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAG;AADH;AA9DA;AAFgE,CAAnE;;AAqEA,MAAMC,mBAAmB,GAAG,qBAAQjB,WAAR,EAAqB;AACtDQ,EAAAA,OAAO,EAAEU,qBAD6C;AAEtDC,EAAAA,QAAQ,EAAEC;AAF4C,CAArB,CAA5B","sourcesContent":["import { MachineConfig, Machine } from \"xstate\"\nimport { IQueryRunningContext } from \"./types\"\nimport { queryRunningServices } from \"./services\"\nimport { queryActions } from \"./actions\"\n\nexport const queryStates: MachineConfig<IQueryRunningContext, any, any> = {\n  initial: `extractingQueries`,\n  states: {\n    extractingQueries: {\n      id: `extracting-queries`,\n      invoke: {\n        id: `extracting-queries`,\n        src: `extractQueries`,\n        onDone: [\n          {\n            actions: `resetGraphQLRunner`,\n            target: `writingRequires`,\n          },\n        ],\n      },\n    },\n    writingRequires: {\n      invoke: {\n        src: `writeOutRequires`,\n        id: `writing-requires`,\n        onDone: {\n          target: `calculatingDirtyQueries`,\n        },\n      },\n    },\n    calculatingDirtyQueries: {\n      invoke: {\n        id: `calculating-dirty-queries`,\n        src: `calculateDirtyQueries`,\n        onDone: {\n          target: `runningStaticQueries`,\n          actions: `assignDirtyQueries`,\n        },\n      },\n    },\n    runningStaticQueries: {\n      invoke: {\n        src: `runStaticQueries`,\n        id: `running-static-queries`,\n        onDone: {\n          target: `runningPageQueries`,\n        },\n      },\n    },\n    runningPageQueries: {\n      invoke: {\n        src: `runPageQueries`,\n        id: `running-page-queries`,\n        onDone: {\n          target: `waitingForJobs`,\n          actions: `flushPageData`,\n        },\n      },\n    },\n\n    waitingForJobs: {\n      invoke: {\n        src: `waitUntilAllJobsComplete`,\n        id: `waiting-for-jobs`,\n        onDone: {\n          target: `done`,\n        },\n      },\n    },\n    done: {\n      type: `final`,\n    },\n  },\n}\nexport const queryRunningMachine = Machine(queryStates, {\n  actions: queryActions,\n  services: queryRunningServices,\n})\n"],"file":"index.js"}