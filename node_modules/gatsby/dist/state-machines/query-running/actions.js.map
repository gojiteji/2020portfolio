{"version":3,"sources":["../../../src/state-machines/query-running/actions.ts"],"names":["flushPageData","assignDirtyQueries","_context","data","queryIds","filesDirty","resetGraphQLRunner","graphqlRunner","store","program","GraphQLRunner","collectStats","graphqlTracing","queryActions"],"mappings":";;;;;AACA;;AACA;;AACA;;AACA;;AAEO,MAAMA,aAAa,GAAG,MAAY;AACvC;AACD,CAFM;;;AAIA,MAAMC,kBAAkB,GAAG,oBAGhC,CAACC,QAAD,EAAW;AAAEC,EAAAA;AAAF,CAAX,KAAwB;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,IAArB;AACA,SAAO;AACLE,IAAAA,UAAU,EAAE,KADP;AAELD,IAAAA;AAFK,GAAP;AAID,CATiC,CAA3B;;AAWA,MAAME,kBAAkB,GAAG,oBAGhC;AACAC,EAAAA,aAAa,EAAE,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,KAAwB;AACrC,kCAAYD,KAAZ;AACA,WAAO,IAAIE,4BAAJ,CAAkBF,KAAlB,EAAyB;AAC9BG,MAAAA,YAAY,EAAE,IADgB;AAE9BC,MAAAA,cAAc,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEG;AAFK,KAAzB,CAAP;AAID;AAPD,CAHgC,CAA3B;;AAaA,MAAMC,YAGZ,GAAG;AACFP,EAAAA,kBADE;AAEFL,EAAAA,kBAFE;AAGFD,EAAAA;AAHE,CAHG","sourcesContent":["import { IQueryRunningContext } from \"./types\"\nimport { DoneInvokeEvent, assign, ActionFunctionMap } from \"xstate\"\nimport { GraphQLRunner } from \"../../query/graphql-runner\"\nimport { assertStore } from \"../../utils/assert-store\"\nimport { enqueueFlush } from \"../../utils/page-data\"\n\nexport const flushPageData = (): void => {\n  enqueueFlush()\n}\n\nexport const assignDirtyQueries = assign<\n  IQueryRunningContext,\n  DoneInvokeEvent<any>\n>((_context, { data }) => {\n  const { queryIds } = data\n  return {\n    filesDirty: false,\n    queryIds,\n  }\n})\n\nexport const resetGraphQLRunner = assign<\n  IQueryRunningContext,\n  DoneInvokeEvent<any>\n>({\n  graphqlRunner: ({ store, program }) => {\n    assertStore(store)\n    return new GraphQLRunner(store, {\n      collectStats: true,\n      graphqlTracing: program?.graphqlTracing,\n    })\n  },\n})\n\nexport const queryActions: ActionFunctionMap<\n  IQueryRunningContext,\n  DoneInvokeEvent<any>\n> = {\n  resetGraphQLRunner,\n  assignDirtyQueries,\n  flushPageData,\n}\n"],"file":"actions.js"}